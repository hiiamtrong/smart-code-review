diff --git a/ai-output.jsonl b/ai-output.jsonl
index 1481315..2cd9b6b 100644
--- a/ai-output.jsonl
+++ b/ai-output.jsonl
@@ -6,17 +6,17 @@
6:   "severity": "ERROR",
7:   "diagnostics": [
8:     {
  :-      "message": "Assignment instead of comparison in 'checkUser': using '=' instead of '===' or '=='. This can lead to bugs in logic.",
9:+      "message": "Assignment in condition. Possible mistaken use of '=' instead of '==' or '==='.",
10:       "location": {
11:         "path": "index.js",
12:         "range": {
13:           "start": {
  :-            "line": 8,
  :-            "column": 5
14:+            "line": 11,
15:+            "column": 7
16:           },
17:           "end": {
  :-            "line": 8,
  :-            "column": 6
18:+            "line": 11,
19:+            "column": 7
20:           }
21:         }
22:       },
@@ -27,122 +27,59 @@
27:       }
28:     },
29:     {
  :-      "message": "Assignment instead of comparison in 'testFunction': using '=' instead of '===' or '=='. This can lead to bugs in logic.",
30:+      "message": "Strict equality check '===' should be used instead of '=='",
31:       "location": {
32:         "path": "index.js",
33:         "range": {
34:           "start": {
  :-            "line": 47,
  :-            "column": 5
  :-          },
  :-          "end": {
  :-            "line": 47,
  :-            "column": 6
  :-          }
  :-        }
  :-      },
  :-      "severity": "ERROR",
  :-      "code": {
  :-        "value": "ai-review",
  :-        "url": ""
  :-      }
  :-    },
  :-    {
  :-      "message": "Security issue - using eval",
  :-      "location": {
  :-        "path": "app.py",
  :-        "range": {
  :-          "start": {
  :-            "line": 38,
  :-            "column": 1
35:+            "line": 35,
36:+            "column": 34
37:           },
38:           "end": {
  :-            "line": 38,
  :-            "column": 1
39:+            "line": 35,
40:+            "column": 35
41:           }
42:         }
43:       },
  :-      "severity": "ERROR",
44:+      "severity": "WARNING",
45:       "code": {
46:         "value": "ai-review",
47:         "url": ""
48:       }
49:     },
50:     {
  :-      "message": "Debug mode in production, security risk",
51:+      "message": "Missing semicolon (;)",
52:       "location": {
  :-        "path": "app.py",
53:+        "path": "index.js",
54:         "range": {
55:           "start": {
  :-            "line": 63,
  :-            "column": 1
56:+            "line": 39,
57:+            "column": 44
58:           },
59:           "end": {
  :-            "line": 63,
  :-            "column": 1
60:+            "line": 39,
61:+            "column": 44
62:           }
63:         }
64:       },
  :-      "severity": "ERROR",
65:+      "severity": "WARNING",
66:       "code": {
67:         "value": "ai-review",
68:         "url": ""
69:       }
70:     },
71:     {
  :-      "message": "Missing error handling for conversion",
72:+      "message": "Assignment in condition. Possible mistaken use of '=' instead of '==' or '==='.",
73:       "location": {
  :-        "path": "main.go",
74:+        "path": "index.js",
75:         "range": {
76:           "start": {
  :-            "line": 32,
77:+            "line": 44,
78:             "column": 7
79:           },
80:           "end": {
  :-            "line": 32,
  :-            "column": 8
  :-          }
  :-        }
  :-      },
  :-      "severity": "ERROR",
  :-      "code": {
  :-        "value": "ai-review",
  :-        "url": ""
  :-      }
  :-    },
  :-    {
  :-      "message": "No input validation",
  :-      "location": {
  :-        "path": "main.go",
  :-        "range": {
  :-          "start": {
  :-            "line": 67,
  :-            "column": 1
  :-          },
  :-          "end": {
  :-            "line": 67,
  :-            "column": 1
  :-          }
  :-        }
  :-      },
  :-      "severity": "ERROR",
  :-      "code": {
  :-        "value": "ai-review",
  :-        "url": ""
  :-      }
  :-    },
  :-    {
  :-      "message": "Missing status code",
  :-      "location": {
  :-        "path": "main.go",
  :-        "range": {
  :-          "start": {
  :-            "line": 70,
  :-            "column": 1
  :-          },
  :-          "end": {
  :-            "line": 70,
  :-            "column": 1
81:+            "line": 44,
82:+            "column": 7
83:           }
84:         }
85:       },
diff --git a/app.py b/app.py
index 69e655f..bfd191e 100644
--- a/app.py
+++ b/app.py
@@ -61,4 +61,9 @@ def process_user_data(name,email,age):  # Missing spaces after commas
61:     }
62: 
63: # Missing main guard
  :-app.run(debug=True,host='0.0.0.0')  # Debug mode in production, security risk
  :\ No newline at end of file
64:+app.run(debug=True,host='0.0.0.0')  # Debug mode in production, security risk
65:+
66:+
67:+# Unused function
68:+def unused_function():
69:+    pass
  :\ No newline at end of file
diff --git a/index.js b/index.js
index ade4688..961c00c 100644
--- a/index.js
+++ b/index.js
@@ -1,58 +1,63 @@
1: // Sample Node.js application with intentional code issues
 :-const express = require('express');
2:+const express = require("express");
3: 
4: // Missing semicolon and var usage
 :-var app = express()
 :-var port = 3000
5:+var app = express();
6:+var port = 3000;
7: 
8: // Assignment instead of comparison
9: function checkUser(user) {
  :-    if (user.id = 1) {  // Should be === or ==
  :-        console.log("Admin user");
  :-    }
  :-
  :-    // Unused variable
  :-    let unusedVar = "this will never be used";
  :-
  :-    // Missing return statement
  :-    if (user.role === 'admin') {
  :-        user.permissions = ['read', 'write', 'delete']
  :-    }
10:+  if ((user.id = 1)) {
11:+    // Should be === or ==
12:+    console.log("Admin user");
13:+  }
14:+
15:+  // Unused variable
16:+  let unusedVar = "this will never be used";
17:+
18:+  // Missing return statement
19:+  if (user.role === "admin") {
20:+    user.permissions = ["read", "write", "delete"];
21:+  }
22: }
23: 
24: // Function with no error handling
  :-app.get('/api/users/:id', (req, res) => {
  :-    const userId = req.params.id;
25:+app.get("/api/users/:id", (req, res) => {
26:+  const userId = req.params.id;
27: 
  :-    // No input validation
  :-    const user = getUserById(userId);
  :-    res.json(user);
28:+  // No input validation
29:+  const user = getUserById(userId);
30:+  res.json(user);
31: });
32: 
33: // Function that could throw error
34: function getUserById(id) {
  :-    const users = [
  :-        { id: 1, name: 'John', role: 'admin' },
  :-        { id: 2, name: 'Jane', role: 'user' }
  :-    ];
35:+  const users = [
36:+    { id: 1, name: "John", role: "admin" },
37:+    { id: 2, name: "Jane", role: "user" },
38:+  ];
39: 
  :-    return users.find(user => user.id == id);  // Should use strict equality
40:+  return users.find((user) => user.id == id); // Should use strict equality
41: }
42: 
43: // Missing error handling in server start
44: app.listen(port, () => {
  :-    console.log(`Server running on port ${port}`)  // Missing semicolon
  :-});// Added a new function with issues
45:+  console.log(`Server running on port ${port}`); // Missing semicolon
46:+}); // Added a new function with issues
47: function testFunction() {
  :-    var x = 1
  :-    if (x = 2) {  // Assignment instead of comparison
  :-        console.log('This has issues')
  :-    }
48:+  var x = 1;
49:+  if ((x = 2)) {
50:+    // Assignment instead of comparison
51:+    console.log("This has issues");
52:+  }
53: }
54: 
  :-
  :-// Intentional syntax error
  :-function syntaxErrorFunc() {
  :-    console.log("This function has a syntax error"
55:+function infiniteLoop() {
56:+  while (true) {
57:+    console.log("This will run forever");
58:+    break;
59:+  }
60: }
61: 
62:+infiniteLoop();
63:+// NEW COMMENT
